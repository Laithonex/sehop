{"ast":null,"code":"import ShopActionTypes from './shop.types';\nexport const updateCollections = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Users/Laith/Desktop/React/eshop/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","updateCollections","collectionsMap","type","UPDATE_COLLECTIONS","payload","fetchCollectionsStartAsync","dispatch","collectionRef","firestore","collection","fetchCollectionsStart","get","then","snapshot","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,cAAD,KAAqB;AAClDC,EAAAA,IAAI,EAAEH,eAAe,CAACI,kBAD4B;AAElDC,EAAAA,OAAO,EAAEH;AAFyC,CAArB,CAA1B;AAKP,OAAO,MAAMI,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAH,IAAAA,QAAQ,CAACI,qBAAqB,EAAtB,CAAR;AAEAH,IAAAA,aAAa,CACVI,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMZ,cAAc,GAAGa,+BAA+B,CAACD,QAAD,CAAtD;AACAP,MAAAA,QAAQ,CAACS,uBAAuB,CAACd,cAAD,CAAxB,CAAR;AACD,KALH,EAMGe,KANH,CAMSC,KAAK,IAAIX,QAAQ,CAACY,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN1B;AAOD,GAXD;AAYD,CAbI","sourcesContent":["import ShopActionTypes from './shop.types'; \r\n\r\nexport const updateCollections = (collectionsMap) => ({\r\n    type: ShopActionTypes.UPDATE_COLLECTIONS,\r\n    payload: collectionsMap\r\n})\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collections');\r\n      dispatch(fetchCollectionsStart());\r\n  \r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}