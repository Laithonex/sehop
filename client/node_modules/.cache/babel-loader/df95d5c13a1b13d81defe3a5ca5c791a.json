{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Laith\\\\Desktop\\\\React\\\\eshop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD_CbpJgSXMwHzjArKPfePwXZwF61cPGAk\",\n  authDomain: \"eshop-6fa4c.firebaseapp.com\",\n  databaseURL: \"https://eshop-6fa4c.firebaseio.com\",\n  projectId: \"eshop-6fa4c\",\n  storageBucket: \"eshop-6fa4c.appspot.com\",\n  messagingSenderId: \"148758146257\",\n  appId: \"1:148758146257:web:b7aa5d4d733ff164bf69f0\",\n  measurementId: \"G-MLD0RC8LZQ\"\n};\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  if (!userAuth) return; //this gets the data from a login. \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //this gets a user id from all the data\n\n  const snapShot = await userRef.get(); // this gets all data that comes along with the id\n  // this part is storing the data\n\n  if (!snapShot.exists) {\n    //it checks whether the data exists. on the siist property if it is true [exist] or faluse [not exist]\n    const displayName = userAuth.displayName,\n          email = userAuth.email; //it asks the dispayname and email from the user auth\n\n    const createdAt = new Date(); // new Date() creat a new date [java script object]\n\n    try {\n      // beucse we are doing is asyncronce data requiest.\n      await userRef.set(_objectSpread({\n        //.set it creat it is a creat medthod (in the firebase). and we are creating a profile from the data that wea re getting from userAuth from the firbase libarary.\n        displayName,\n        email,\n        createdAt\n      }, addtionalData));\n    } catch (error) {\n      console.log('error creating user', error.massage);\n    }\n  }\n\n  return userRef; //the data will be callable to any of our js files and we can reuse it. \n  // console.log(snapRef)\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //this jus to add the data in our firebase store so we don not do it manually. \n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Laith/Desktop/React/eshop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","addtionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","massage","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD_CbpJgSXMwHzjArKPfePwXZwF61cPGAk\",\r\n    authDomain: \"eshop-6fa4c.firebaseapp.com\",\r\n    databaseURL: \"https://eshop-6fa4c.firebaseio.com\",\r\n    projectId: \"eshop-6fa4c\",\r\n    storageBucket: \"eshop-6fa4c.appspot.com\",\r\n    messagingSenderId: \"148758146257\",\r\n    appId: \"1:148758146257:web:b7aa5d4d733ff164bf69f0\",\r\n    measurementId: \"G-MLD0RC8LZQ\"\r\n  };\r\n  \r\n  export const createUserProfileDocument   = async(userAuth, addtionalData) => {\r\n    if (!userAuth) return; //this gets the data from a login. \r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`); //this gets a user id from all the data\r\n    \r\n    const snapShot = await userRef.get() // this gets all data that comes along with the id\r\n    \r\n    // this part is storing the data\r\n    \r\n    if(!snapShot.exists){        //it checks whether the data exists. on the siist property if it is true [exist] or faluse [not exist]\r\n      const {displayName, email} = userAuth; //it asks the dispayname and email from the user auth\r\n      const createdAt = new Date(); // new Date() creat a new date [java script object]\r\n\r\n      try{        // beucse we are doing is asyncronce data requiest.\r\n        await userRef.set({  //.set it creat it is a creat medthod (in the firebase). and we are creating a profile from the data that wea re getting from userAuth from the firbase libarary.\r\n        displayName, \r\n        email, \r\n        createdAt,\r\n        ...addtionalData\r\n      })\r\n      }catch (error) {\r\n        console.log('error creating user', error.massage)\r\n      }\r\n\r\n    }\r\n\r\n    return userRef; //the data will be callable to any of our js files and we can reuse it. \r\n\r\n    // console.log(snapRef)\r\n  }\r\n  \r\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => { //this jus to add the data in our firebase store so we don not do it manually. \r\n    const collectionRef = firestore.collection(collectionKey); \r\n    console.log(collectionRef);\r\n    \r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      console.log(newDocRef);\r\n      batch.set(newDocRef, obj);\r\n    })\r\n    return await batch.commit();\r\n    \r\n  }\r\n  \r\n  export const convertCollectionsSnapshotToMap = collections => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n      const {title, items} = doc.data(); \r\n      \r\n      return{\r\n        routeName: encodeURI(title.toLowerCase()),\r\n        id: doc.id,\r\n        title,\r\n        items\r\n      }\r\n    });\r\n    console.log(transformedCollection)\r\n    \r\n    return transformedCollection.reduce((accumulator, collection)=> {\r\n      accumulator[collection.title.toLowerCase()] = collection;\r\n      return accumulator;\r\n    },{});\r\n  }\r\n  \r\n  firebase.initializeApp(config);\r\n  \r\n  \r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n  \r\n  const provider =new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt: 'select_account'});\r\n  \r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n  export default firebase;\r\n  \r\n  \r\n  \r\n"]},"metadata":{},"sourceType":"module"}