{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux'; //it adds middel ware to the store \n\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger'; //type of middelwaear\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './root-reducer';\nconst middlewares = [thunk]; // this is responsiblie of showing the state and next state on the consol;\n\nif (process.env.NODE_ENV === 'development') {\n  //it will show on the consol state if the state is equal devlopment, else it will show zero.\n  middlewares.push(logger);\n}\n\n;\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //it spread everything from the middleware it the store\n\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n}; // import { createStore, applyMiddleware } from 'redux';\n// import logger from 'redux-logger';\n// import rootReducer from './root-reducer';\n// const middlewares = [logger];\n// const store = createStore(rootReducer, applyMiddleware(...middlewares));\n// export default store;","map":{"version":3,"sources":["C:/Users/Laith/Desktop/React/eshop/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","thunk","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA4C,OAA5C,C,CAAqD;;AACrD,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,MAAP,MAAmB,cAAnB,C,CAAmC;;AACnC,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,WAAW,GAAK,CAACF,KAAD,CAAtB,C,CAA+B;;AAE/B,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA2C;AAAE;AACzCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACH;;AAAA;AAED,OAAO,MAAMQ,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGK,WAAJ,CAA7B,CAAzB,C,CAAyE;;AAChF,OAAO,MAAMM,SAAS,GAAGV,YAAY,CAACS,KAAD,CAA9B;AAEP,eAAe;AAACA,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAf,C,CAEA;AACA;AAEA;AAEA;AAEA;AAEA","sourcesContent":["import { createStore, applyMiddleware} from 'redux'; //it adds middel ware to the store \r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport logger from 'redux-logger'; //type of middelwaear\r\nimport thunk from 'redux-thunk'; \r\n\r\nimport rootReducer from './root-reducer'; \r\n\r\nconst middlewares   = [thunk]; // this is responsiblie of showing the state and next state on the consol;\r\n\r\nif (process.env.NODE_ENV === 'development'){ //it will show on the consol state if the state is equal devlopment, else it will show zero.\r\n    middlewares.push(logger)\r\n}; \r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //it spread everything from the middleware it the store\r\nexport const persistor = persistStore(store); \r\n\r\nexport default {store, persistor};\r\n\r\n// import { createStore, applyMiddleware } from 'redux';\r\n// import logger from 'redux-logger';\r\n\r\n// import rootReducer from './root-reducer';\r\n\r\n// const middlewares = [logger];\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\n// export default store;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}